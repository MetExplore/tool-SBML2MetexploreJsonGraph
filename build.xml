<project name="phnmnl-Enrichment" default="usage" basedir=".">

	<exec executable="git" outputproperty="git.commit.hash" resultproperty="git.return.status" failifexecutionfails="false">
		<arg line="log -1 --pretty=format:%H" />
	</exec>

	<condition property="git.clone">
		<and>
			<not>
				<contains string="${git.commit.hash}" substring="fatal" />
			</not>
			<isset property="git.return.status" />
		</and>
	</condition>

	<tstamp>
		<format property="YEAR" pattern="yyyy" />
	</tstamp>


	<property file="${basedir}/build.properties" />



	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->

	<target description="Initialization target" name="init" unless="target.init.done" depends="git.build.number">

		<property name="target.init.done" value="true" />

		<property name="Name" value="${phnmnl.Name}" />
		<property name="name" value="${phnmnl.name}" />
		<property name="version" value="${phnmnl.version}" />
		<property name="api.version" value="${phnmnl.api.version}" />

		<property name="year" value="${YEAR}" />

		<echo message="-----------	${Name} ${version} [${year}] ------------" />
		<echo message="-----------		${TODAY}   ------------" />
		<echo message="-----------		${DSTAMP} ${TSTAMP}  ------------" />
		<echo message="-----------	git hash ${phnmnl.revision}  ------------" />
		<echo message="-----------	git url ${phnmnl.url}  ------------" />

		<property environment="env" />
		<property name="build.compiler" value="modern" />
		<property name="build.sysclasspath" value="ignore" />
		<property name="debug" value="on" />
		<property name="optimize" value="on" />
		<property name="deprecation" value="false" />
		<property name="depend" value="true" />
		<property name="verbose" value="false" />

		<property name="build.time" value="${DSTAMP}-${TSTAMP}" />
		<property name="build.name" value="${version} (build ${phnmnl.revision}-${build.time})" />

		<property name="src.dir" value="${basedir}/src" />
		<property name="test.dir" location="${basedir}/src" />
		<property name="report.dir" location="${basedir}/tests/reports" />


		<property name="build.dir" value="${basedir}/build" />
		<property name="build.src" value="${basedir}/build/src" />
		<property name="build.dest" value="${basedir}/build/classes" />
		<property name="build.javadocs" value="${basedir}/build/apidocs" />
		<property name="jars.dir" value="${basedir}/lib" />
		<property name="dist.root" value="${basedir}/dist" />
		<property name="dist.lib.dir" value="${dist.root}/lib" />
		<property name="dist.dir" value="${dist.root}/${name}" />

		<property name="resource.dir" value="${basedir}/resources" />

		<property name="main-class" value="phnmnl.SBML2Json" />

		<filter token="year" value="${year}" />
		<filter token="version" value="${version}" />
		<filter token="date" value="${TODAY}" />
		<filter token="log" value="true" />
		<filter token="verbose" value="true" />

		<path id="classpath">
			<filelist>
				<file name="${jars.dir}/testlibs/junit-4.12.jar"/>
				<file name="${jars.dir}/testlibs/hamcrest-core-1.3.jar"/>
			</filelist>
			<fileset dir="${jars.dir}" includes="*.jar *.zip"/>
			<fileset dir="${build.dir}" includes="*.jar *.zip" />
		</path>


	</target>



	<!-- =================================================================== -->
	<!-- Help on usage                                                       -->
	<!-- =================================================================== -->
	<target name="usage" description="Help on usage" depends="init">
		<echo message="	${Name} Build file" />
		<echo message="-------------------------------------------------------------" />
		<echo message="	available targets are:" />
		<echo message="		jar         --> generates the ${name}.jar file" />
		<echo message="		src-jar     --> generates the ${name}.jar file along with the source code" />
		<!-- 	<echo message="		test         runs the tests" />
		<echo message="		javadoc      generates the API documentation" />-->
		<echo message=" See the comments inside the build.xml file for more details." />
		<echo message=" -------------------------------------------------------------" />

	</target>


	<!-- =================================================================== -->
	<!-- Creating the phnmnl revision and url 						     -->
	<!-- =================================================================== -->
	<target name="git.build.number" description="Finds out the git build number" if="git.clone">

		<exec executable="git" outputproperty="git.origin.url" failifexecutionfails="false">
			<arg line="config --get remote.origin.url" />
		</exec>

		<property name="phnmnl.revision" value="${git.commit.hash}" />
		<property name="phnmnl.url" value="${git.origin.url}" />

	</target>



	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target name="prepare" description="Prepares the build directory" depends="init" unless="prepare.src.target.done">

		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dest}" />
		<mkdir dir="${build.src}" />
		<mkdir dir="${report.dir}" />
		<echo message="Directories created" />
	</target>


	<!-- =================================================================== -->
	<!-- Prepares the source code                                            -->
	<!-- =================================================================== -->
	<target name="prepare-src" description="Prepares the source code" depends="prepare" unless="prepare.src.target.done">

		<property name="prepare.src.target.done" value="true" />

		<copy todir="${build.src}">
			<fileset dir="${basedir}/src" includes="**/*" />
		</copy>

	</target>


	<!-- =================================================================== -->
	<!-- Compiles the src directory                                         -->
	<!-- =================================================================== -->
	<target name="compile" description="Compiles the source" depends="prepare">
		<javac srcdir="${src.dir}" 
			destdir="${build.dest}" 
			debug="${debug}" 
			optimize="${optimize}" 
			verbose="${verbose}" 
			source="${phnmnl.build.javac.source}" 
			target="${phnmnl.build.javac.target}" 
			classpathref="classpath">
		</javac>
	</target>


	<!-- Run jUnit -->
	<target name="junit" depends="compile">

		<junit printsummary="yes" haltonfailure="no">

			<classpath refid="classpath" />
			<classpath location="${build.dest}" />

			<formatter type="xml" />
			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="${test.dir}">
					<include name="**/Test*.java" />
				</fileset>
			</batchtest>

		</junit>
	</target>



	<!-- =================================================================== -->
	<!-- Creates the class package and include all the dependencies jars     -->
	<!-- =================================================================== -->
	<target name="copy-dependencies">

		<mkdir dir="${dist.lib.dir}" />

		<jar jarfile="${dist.lib.dir}/dependencies-all.jar">
			<zipgroupfileset dir="${jars.dir}">
				<include name="**/*.jar" />
			</zipgroupfileset>
		</jar>

	</target>




	<!-- =================================================================== -->
	<!-- Creates the class package and include all the dependencies jars     -->
	<!-- =================================================================== -->
	<target name="jar" description="Creates the class package and includes all the dependencies jars into a simple jar file" 
		depends="compile, copy-dependencies , junit">
		<jar jarfile="${dist.dir}/${name}.jar" basedir="${build.dest}" includes="**/*.class" index="true">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>
			<zipfileset src="${dist.lib.dir}/dependencies-all.jar" excludes="META-INF/*.SF" />
		</jar>

		<ant dir="${basedir}" >
			<target name="clean-up" />
		</ant>

	</target>



	<!-- =================================================================== -->
	<!-- Creates the class package and include all the dependencies jars     -->
	<!-- =================================================================== -->
	<target name="src-jar" 
		description="Creates the class package and includes all the dependencies jars into a big jar file that contains the source" 
		depends="compile, copy-dependencies, prepare-src, junit">

		<jar jarfile="${dist.dir}/${name}-with-src.jar" 
			filesetmanifest="mergewithoutmain" 
			duplicate="preserve" basedir="${build.dest}" 
			index="true">

			<!-- we use the ${build.src} to include the sources in the resulting jar -->
			<fileset dir="${build.src}" />
			<!-- all the dependencies jars -->
			<zipfileset src="${dist.lib.dir}/dependencies-all.jar" excludes="META-INF/*.SF" />

			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>

		</jar>

		<ant dir="${basedir}">
			<target name="clean-up" />
		</ant>

	</target>


	<!-- =================================================================== -->
	<!-- Cleans the directory after the jar creation					     -->
	<!-- =================================================================== -->
	<target name="clean-up" description="Cleans the build directory" >

		<delete includeEmptyDirs="true" >
			<fileset dir="${build.dest}" includes="**/*" />
			<fileset dir="${build.src}" includes="**/*" />
		</delete>
		<delete dir="${dist.lib.dir}" includeEmptyDirs="true" >
		</delete>
	</target>

</project>